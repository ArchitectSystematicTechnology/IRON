// Copyright 2016 Iron.io
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*Reason Machine usable reason for job being in this state.
Valid values for error status are `timeout | killed | bad_exit`.
Valid values for cancelled status are `client_request`.
For everything else, this is undefined.


swagger:model Reason
*/
type Reason string

// for schema
var reasonEnum []interface{}

func (m Reason) validateReasonEnum(path, location string, value Reason) error {
	if reasonEnum == nil {
		var res []Reason
		if err := json.Unmarshal([]byte(`["timeout","killed","bad_exit","client_request"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			reasonEnum = append(reasonEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, reasonEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this reason
func (m Reason) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateReasonEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
